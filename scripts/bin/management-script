#!/bin/sh

DEFAULT_ADAPTER=""
DEFAULT_SCAN_DUR="5"
DEFAULT_TIME_BETWEEN="5"
DEFAULT_DISCOVERY="1"
DEFAULT_HASS_DISCOVERY="1"
DEFAULT_DISCOVERY_DEVICE_NAME="TheengsGateway"
DEFAULT_DISCOVERY_FILTER="IBEACON GAEN MS-CDP"
DEFAULT_DISCOVERY_TOPIC="homeassistant/sensor"
DEFAULT_HOST=""
DEFAULT_LOG_LEVEL="WARNING"
DEFAULT_PASS=""
DEFAULT_PORT="1883"
DEFAULT_PUB_TOPIC="home/TheengsGateway/BTtoMQTT"
DEFAULT_SUB_TOPIC="home/+/BTtoMQTT/undecoded"
DEFAULT_USER=""
DEFAULT_TIME_SYNC=""
DEFAULT_TIME_FORMAT="0"
DEFAULT_PRESENCE_TOPIC="home/TheengsGateway/presence"
DEFAULT_PRESENCE="0"
DEFAULT_LWT_TOPIC="home/TheengsGateway/LWT"
DEFAULT_PUBLISH_ADVDATA="0"
DEFAULT_ENABLE_TLS="0"
DEFAULT_ENABLE_WS="0"
DEFAULT_BINDKEYS=""
DEFAULT_IDENTITIES=""
DEFAULT_ENABLE_BLE="1"
DEFAULT_TRACKER_TIMEOUT="120"

# ADAPTER
adapter() {
	ble_adapter="$(snapctl get ble.adapter)"
	if [ -z "$ble_adapter" ]; then
		ble_adapter="$DEFAULT_ADAPTER"
		set_adapter "$ble_adapter"
		set_previous_adapter "$ble_adapter"
	fi
	echo "$ble_adapter"
}

set_adapter() {
	snapctl set ble.adapter="$1"
}

previous_adapter() {
	snapctl get private.ble.adapter
}

set_previous_adapter() {
	snapctl set private.ble.adapter="$1"
}

# SCAN_DUR
scan_dur() {
	ble_scan_duration="$(snapctl get ble.scan-duration)"
	if [ -z "$ble_scan_duration" ]; then
		ble_scan_duration="$DEFAULT_SCAN_DUR"
		set_scan_dur "$ble_scan_duration"
		set_previous_scan_dur "$ble_scan_duration"
	fi
	echo "$ble_scan_duration"
}

set_scan_dur() {
	snapctl set ble.scan-duration="$1"
}

previous_scan_dur() {
	snapctl get private.ble.scan-duration
}

set_previous_scan_dur() {
	snapctl set private.ble.scan-duration="$1"
}

# TIME_BETWEEN
time_between() {
	ble_time_between="$(snapctl get ble.time-between)"
	if [ -z "$ble_time_between" ]; then
		ble_time_between="$DEFAULT_TIME_BETWEEN"
		set_time_between "$ble_time_between"
		set_previous_time_between "$ble_time_between"
	fi
	echo "$ble_time_between"
}

set_time_between() {
	snapctl set ble.time-between="$1"
}

previous_time_between() {
	snapctl get private.ble.time-between
}

set_previous_time_between() {
	snapctl set private.ble.time-between="$1"
}

# DISCOVERY
discovery() {
	ha_discovery="$(snapctl get ha.discovery)"
	if [ -z "$ha_discovery" ]; then
		ha_discovery="$DEFAULT_DISCOVERY"
		set_discovery "$ha_discovery"
		set_previous_discovery "$ha_discovery"
	fi
	echo "$ha_discovery"
}

set_discovery() {
	snapctl set ha.discovery="$1"
}

previous_discovery() {
	snapctl get private.ha.discovery
}

set_previous_discovery() {
	snapctl set private.ha.discovery="$1"
}

# HASS_DISCOVERY
hass_discovery() {
	ha_hass_discovery="$(snapctl get ha.hass-discovery)"
	if [ -z "$ha_hass_discovery" ]; then
		ha_hass_discovery="$DEFAULT_HASS_DISCOVERY"
		set_hass_discovery "$ha_hass_discovery"
		set_previous_hass_discovery "$ha_hass_discovery"
	fi
	echo "$ha_hass_discovery"
}

set_hass_discovery() {
	snapctl set ha.hass-discovery="$1"
}

previous_hass_discovery() {
	snapctl get private.ha.hass-discovery
}

set_previous_hass_discovery() {
	snapctl set private.ha.hass-discovery="$1"
}
# DISCOVERY_DEVICE_NAME
discovery_device_name() {
	ha_discovery_device_name="$(snapctl get ha.discovery-device-name)"
	if [ -z "$ha_discovery_device_name" ]; then
		ha_discovery_device_name="$DEFAULT_DISCOVERY_DEVICE_NAME"
		set_discovery_device_name "$ha_discovery_device_name"
		set_previous_discovery_device_name "$ha_discovery_device_name"
	fi
	echo "$ha_discovery_device_name"
}

set_discovery_device_name() {
	snapctl set ha.discovery-device-name="$1"
}

previous_discovery_device_name() {
	snapctl get private.ha.discovery-device-name
}

set_previous_discovery_device_name() {
	snapctl set private.ha.discovery-device-name="$1"
}

# DISCOVERY_FILTER
discovery_filter() {
	ha_discovery_filter="$(snapctl get ha.discovery-filter)"
	if [ -z "$ha_discovery_filter" ]; then
		ha_discovery_filter="$DEFAULT_DISCOVERY_FILTER"
		set_discovery_filter "$ha_discovery_filter"
		set_previous_discovery_filter "$ha_discovery_filter"
	fi
	echo "$ha_discovery_filter"
}

set_discovery_filter() {
	snapctl set ha.discovery-filter="$1"
}

previous_discovery_filter() {
	snapctl get private.ha.discovery-filter
}

set_previous_discovery_filter() {
	snapctl set private.ha.discovery-filter="$1"
}

# DISCOVERY_TOPIC
discovery_topic() {
	ha_discovery_topic="$(snapctl get ha.discovery-topic)"
	if [ -z "$ha_discovery_topic" ]; then
		ha_discovery_topic="$DEFAULT_DISCOVERY_TOPIC"
		set_discovery_topic "$ha_discovery_topic"
		set_previous_discovery_topic "$ha_discovery_topic"
	fi
	echo "$ha_discovery_topic"
}

set_discovery_topic() {
	snapctl set ha.discovery-topic="$1"
}

previous_discovery_topic() {
	snapctl get private.ha.discovery-topic
}

set_previous_discovery_topic() {
	snapctl set private.ha.discovery-topic="$1"
}

# LOG_LEVEL
log_level() {
	ll="$(snapctl get log-level)"
	if [ -z "$ll" ]; then
		ll="$DEFAULT_LOG_LEVEL"
		set_log_level "$ll"
		set_previous_log_level "$ll"
	fi
	echo "$ll"
}

set_log_level() {
	snapctl set log-level="$1"
}

previous_log_level() {
	snapctl get private.log-level
}

set_previous_log_level() {
	snapctl set private.log-level="$1"
}

# HOST
host() {
	mqtt_host="$(snapctl get mqtt.host)"
	if [ -z "$mqtt_host" ]; then
		mqtt_host="$DEFAULT_HOST"
		set_host "$mqtt_host"
		set_previous_host "$mqtt_host"
	fi
	echo "$mqtt_host"
}

set_host() {
	snapctl set mqtt.host="$1"
}

previous_host() {
	snapctl get private.mqtt.host
}

set_previous_host() {
	snapctl set private.mqtt.host="$1"
}

# PASS
pass() {
	mqtt_pass="$(snapctl get mqtt.pass)"
	if [ -z "$mqtt_pass" ]; then
		mqtt_pass="$DEFAULT_PASS"
		set_pass "$mqtt_pass"
		set_previous_pass "$mqtt_pass"
	fi
	echo "$mqtt_pass"
}

set_pass() {
	snapctl set mqtt.pass="$1"
}

previous_pass() {
	snapctl get private.mqtt.pass
}

set_previous_pass() {
	snapctl set private.mqtt.pass="$1"
}

# PORT
port() {
	mqtt_port="$(snapctl get mqtt.port)"
	if [ -z "$mqtt_port" ]; then
		mqtt_port="$DEFAULT_PORT"
		set_port "$mqtt_port"
		set_previous_port "$mqtt_port"
	fi
	echo "$mqtt_port"
}

set_port() {
	snapctl set mqtt.port="$1"
}

previous_port() {
	snapctl get private.mqtt.port
}

set_previous_port() {
	snapctl set private.mqtt.port="$1"
}

# PUB_TOPIC
pub_topic() {
	mqtt_pub_topic="$(snapctl get mqtt.pub-topic)"
	if [ -z "$mqtt_pub_topic" ]; then
		mqtt_pub_topic="$DEFAULT_PUB_TOPIC"
		set_pub_topic "$mqtt_pub_topic"
		set_previous_pub_topic "$mqtt_pub_topic"
	fi
	echo "$mqtt_pub_topic"
}

set_pub_topic() {
	snapctl set mqtt.pub-topic="$1"
}

previous_pub_topic() {
	snapctl get private.mqtt.pub-topic
}

set_previous_pub_topic() {
	snapctl set private.mqtt.pub-topic="$1"
}

# SUB_TOPIC
sub_topic() {
	mqtt_sub_topic="$(snapctl get mqtt.sub-topic)"
	if [ -z "$mqtt_sub_topic" ]; then
		mqtt_sub_topic="$DEFAULT_SUB_TOPIC"
		set_sub_topic "$mqtt_sub_topic"
		set_previous_sub_topic "$mqtt_sub_topic"
	fi
	echo "$mqtt_sub_topic"
}

set_sub_topic() {
	snapctl set mqtt.sub-topic="$1"
}

previous_sub_topic() {
	snapctl get private.mqtt.sub-topic
}

set_previous_sub_topic() {
	snapctl set private.mqtt.sub-topic="$1"
}

# USER
user() {
	mqtt_user="$(snapctl get mqtt.user)"
	if [ -z "$mqtt_user" ]; then
		mqtt_user="$DEFAULT_USER"
		set_user "$mqtt_user"
		set_previous_user "$mqtt_user"
	fi
	echo "$mqtt_user"
}

set_user() {
	snapctl set mqtt.user="$1"
}

previous_user() {
	snapctl get private.mqtt.user
}

set_previous_user() {
	snapctl set private.mqtt.user="$1"
}

# TIME_SYNC
time_sync() {
	time_sync_addresses="$(snapctl get time-sync.addresses)"
	if [ -z "$time_sync_addresses" ]; then
		time_sync_addresses="$DEFAULT_TIME_SYNC"
		set_time_sync "$time_sync_addresses"
		set_previous_time_sync "$time_sync_addresses"
	fi
	echo "$time_sync_addresses"
}

set_time_sync() {
	snapctl set time-sync.addresses="$1"
}

previous_time_sync() {
	snapctl get private.time-sync.addresses
}

set_previous_time_sync() {
	snapctl set private.time-sync.addresses="$1"
}

# TIME_FORMAT
time_format() {
	time_sync_format="$(snapctl get time-sync.format)"
	if [ -z "$time_sync_format" ]; then
		time_sync_format="$DEFAULT_TIME_FORMAT"
		set_time_format "$time_sync_format"
		set_previous_time_format "$time_sync_format"
	fi
	echo "$time_sync_format"
}

set_time_format() {
	snapctl set time-sync.format="$1"
}

previous_time_format() {
	snapctl get private.time-sync.format
}

set_previous_time_format() {
	snapctl set private.time-sync.format="$1"
}

# PRESENCE_TOPIC
presence_topic() {
	presence_mqtt_topic="$(snapctl get presence.topic)"
	if [ -z "$presence_mqtt_topic" ]; then
		presence_mqtt_topic="$DEFAULT_PRESENCE_TOPIC"
		set_presence_topic "$presence_mqtt_topic"
		set_previous_presence_topic "$presence_mqtt_topic"
	fi
	echo "$presence_mqtt_topic"
}

set_presence_topic() {
	snapctl set presence.topic="$1"
}

previous_presence_topic() {
	snapctl get private.presence.topic
}

set_previous_presence_topic() {
	snapctl set private.presence.topic="$1"
}

# PRESENCE
presence() {
	presence_enable="$(snapctl get presence.enable)"
	if [ -z "$presence_enable" ]; then
		presence_enable="$DEFAULT_PRESENCE"
		set_presence "$presence_enable"
		set_previous_presence "$presence_enable"
	fi
	echo "$presence_enable"
}

set_presence() {
	snapctl set presence.enable="$1"
}

previous_presence() {
	snapctl get private.presence.enable
}

set_previous_presence() {
	snapctl set private.presence.enable="$1"
}

# LWT_TOPIC
lwt_topic() {
	mqtt_lwt_topic="$(snapctl get mqtt.lwt-topic)"
	if [ -z "$mqtt_lwt_topic" ]; then
		mqtt_lwt_topic="$DEFAULT_LWT_TOPIC"
		set_lwt_topic "$mqtt_lwt_topic"
		set_previous_lwt_topic "$mqtt_lwt_topic"
	fi
	echo "$mqtt_lwt_topic"
}

set_lwt_topic() {
	snapctl set mqtt.lwt-topic="$1"
}

previous_lwt_topic() {
	snapctl get private.mqtt.lwt-topic
}

set_previous_lwt_topic() {
	snapctl set private.mqtt.lwt-topic="$1"
}

# PUBLISH_ADVDATA
publish_advdata() {
	publish_advdata_enable="$(snapctl get mqtt.publish-advdata)"
	if [ -z "$publish_advdata_enable" ]; then
		publish_advdata_enable="$DEFAULT_PUBLISH_ADVDATA"
		set_publish_advdata "$publish_advdata_enable"
		set_previous_publish_advdata "$publish_advdata_enable"
	fi
	echo "$publish_advdata_enable"
}

set_publish_advdata() {
	snapctl set mqtt.publish-advdata="$1"
}

previous_publish_advdata() {
	snapctl get private.mqtt.publish-advdata
}

set_previous_publish_advdata() {
	snapctl set private.mqtt.publish-advdata="$1"
}

# ENABLE_TLS
enable_tls() {
	enable_tls_enable="$(snapctl get mqtt.enable-tls)"
	if [ -z "$enable_tls_enable" ]; then
		enable_tls_enable="$DEFAULT_ENABLE_TLS"
		set_enable_tls "$enable_tls_enable"
		set_previous_enable_tls "$enable_tls_enable"
	fi
	echo "$enable_tls_enable"
}

set_enable_tls() {
	snapctl set mqtt.enable-tls="$1"
}

previous_enable_tls() {
	snapctl get private.mqtt.enable-tls
}

set_previous_enable_tls() {
	snapctl set private.mqtt.enable-tls="$1"
}

# ENABLE_WS
enable_ws() {
	enable_ws_enable="$(snapctl get mqtt.enable-ws)"
	if [ -z "$enable_ws_enable" ]; then
		enable_ws_enable="$DEFAULT_ENABLE_WS"
		set_enable_ws "$enable_ws_enable"
		set_previous_enable_ws "$enable_ws_enable"
	fi
	echo "$enable_ws_enable"
}

set_enable_ws() {
	snapctl set mqtt.enable-ws="$1"
}

previous_enable_ws() {
	snapctl get private.mqtt.enable-ws
}

set_previous_enable_ws() {
	snapctl set private.mqtt.enable-ws="$1"
}

# BINDKEYS
bindkeys() {
	bindkeys_addresses="$(snapctl get bindkeys)"
	if [ -z "$bindkeys_addresses" ]; then
		bindkeys_addresses="$DEFAULT_BINDKEYS"
		set_bindkeys "$bindkeys_addresses"
		set_previous_bindkeys "$bindkeys_addresses"
	fi
	echo "$bindkeys_addresses"
}

set_bindkeys() {
	snapctl set bindkeys="$1"
}

previous_bindkeys() {
	snapctl get private.bindkeys
}

set_previous_bindkeys() {
	snapctl set private.bindkeys="$1"
}

# IDENTITIES
identities() {
	identities_addresses="$(snapctl get identities)"
	if [ -z "$identities_addresses" ]; then
		identities_addresses="$DEFAULT_IDENTITIES"
		set_identities "$identities_addresses"
		set_previous_identities "$identities_addresses"
	fi
	echo "$identities_addresses"
}

set_identities() {
	snapctl set identities="$1"
}

previous_identities() {
	snapctl get private.identities
}

set_previous_identities() {
	snapctl set private.identities="$1"
}

# ENABLE_BLE
enable_ble() {
	enable_ble_enable="$(snapctl get ble.enable)"
	if [ -z "$enable_ble_enable" ]; then
		enable_ble_enable="$DEFAULT_ENABLE_BLE"
		set_enable_ble "$enable_ble_enable"
		set_previous_enable_ble "$enable_ble_enable"
	fi
	echo "$enable_ble_enable"
}

set_enable_ble() {
	snapctl set ble.enable="$1"
}

previous_enable_ble() {
	snapctl get private.ble.enable
}

set_previous_enable_ble() {
	snapctl set private.ble.enable="$1"
}

# TRACKER_TIMEOUT
tracker_time() {
	tracker_timeout="$(snapctl get tracker-timeout)"
	if [ -z "$tracker_timeout" ]; then
		tracker_timeout="$DEFAULT_TRACKER_TIMEOUT"
		set_tracker_timeout "$tracker_timeout"
		set_previous_tracker_timeout "$tracker_timeout"
	fi
	echo "$tracker_timeout"
}

set_tracker_timeout() {
	snapctl set tracker_timeout="$1"
}

previous_tracker_timeout() {
	snapctl get private.tracker-timeout
}

set_previous_tracker_timeout() {
	snapctl set private.tracker-timeout="$1"
}
