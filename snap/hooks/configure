#!/bin/sh
# shellcheck source=scripts/bin/management-script
. "$SNAP/bin/management-script"

restart_gateway_if_running() {
	LANG=C snap services theengs-gateway | grep inactive || snapctl restart theengs-gateway
}

handle_adapter_config() {
	adapter="$(adapter)"
	previous_adapter="$(previous_adapter)"

	if [ "$adapter" = "$previous_adapter" ]; then
		return 0
	fi

	set_adapter "$adapter"
	set_previous_adapter "$adapter"

	restart_gateway_if_running
}
handle_adapter_config

handle_scan_dur_config() {
	scan_dur="$(scan_dur)"
	previous_scan_dur="$(previous_scan_dur)"

	if [ "$scan_dur" = "$previous_scan_dur" ]; then
		return 0
	fi

	set_scan_dur "$scan_dur"
	set_previous_scan_dur "$scan_dur"

	restart_gateway_if_running
}
handle_scan_dur_config

handle_time_between_config() {
	time_between="$(time_between)"
	previous_time_between="$(previous_time_between)"

	if [ "$time_between" = "$previous_time_between" ]; then
		return 0
	fi

	set_time_between "$time_between"
	set_previous_time_between "$time_between"

	restart_gateway_if_running
}
handle_time_between_config

handle_discovery_config() {
	discovery="$(discovery)"
	previous_discovery="$(previous_discovery)"

	if [ "$discovery" = "$previous_discovery" ]; then
		return 0
	fi

	set_discovery "$discovery"
	set_previous_discovery "$discovery"

	restart_gateway_if_running
}
handle_discovery_config

handle_hass_discovery_config() {
	hass_discovery="$(hass_discovery)"
	previous_hass_discovery="$(previous_hass_discovery)"

	if [ "$hass_discovery" = "$previous_hass_discovery" ]; then
		return 0
	fi

	set_hass_discovery "$hass_discovery"
	set_previous_hass_discovery "$hass_discovery"

	restart_gateway_if_running
}
handle_hass_discovery_config

handle_discovery_device_name_config() {
	discovery_device_name="$(discovery_device_name)"
	previous_discovery_device_name="$(previous_discovery_device_name)"

	if [ "$discovery_device_name" = "$previous_discovery_device_name" ]; then
		return 0
	fi

	set_discovery_device_name "$discovery_device_name"
	set_previous_discovery_device_name "$discovery_device_name"
	restart_gateway_if_running
}
handle_discovery_device_name_config

handle_discovery_filter_config() {
	discovery_filter="$(discovery_filter)"
	previous_discovery_filter="$(previous_discovery_filter)"

	if [ "$discovery_filter" = "$previous_discovery_filter" ]; then
		return 0
	fi

	set_discovery_filter "$discovery_filter"
	set_previous_discovery_filter "$discovery_filter"

	restart_gateway_if_running
}
handle_discovery_filter_config

handle_discovery_topic_config() {
	discovery_topic="$(discovery_topic)"
	previous_discovery_topic="$(previous_discovery_topic)"

	if [ "$discovery_topic" = "$previous_discovery_topic" ]; then
		return 0
	fi

	set_discovery_topic "$discovery_topic"
	set_previous_discovery_topic "$discovery_topic"

	restart_gateway_if_running
}
handle_discovery_topic_config

handle_log_level_config() {
	log_level="$(log_level)"
	previous_log_level="$(previous_log_level)"

	if [ "$log_level" = "$previous_log_level" ]; then
		return 0
	fi

	set_log_level "$log_level"
	set_previous_log_level "$log_level"

	restart_gateway_if_running
}
handle_log_level_config

handle_host_config() {
	host="$(host)"
	previous_host="$(previous_host)"

	if [ "$host" = "$previous_host" ]; then
		return 0
	fi

	set_host "$host"
	set_previous_host "$host"

	restart_gateway_if_running
}
handle_host_config

handle_pass_config() {
	pass="$(pass)"
	previous_pass="$(previous_pass)"

	if [ "$pass" = "$previous_pass" ]; then
		return 0
	fi

	set_pass "$pass"
	set_previous_pass "$pass"

	restart_gateway_if_running
}
handle_pass_config

handle_port_config() {
	port="$(port)"
	previous_port="$(previous_port)"

	if [ "$port" = "$previous_port" ]; then
		return 0
	fi

	# Validate MQTT port
	if ! expr "$port" : '^[0-9]\+$' >/dev/null; then
		echo "\"$port\" is not a valid MQTT port" >&2
		return 1
	fi

	set_port "$port"
	set_previous_port "$port"

	restart_gateway_if_running
}
handle_port_config

handle_pub_topic_config() {
	pub_topic="$(pub_topic)"
	previous_pub_topic="$(previous_pub_topic)"

	if [ "$pub_topic" = "$previous_pub_topic" ]; then
		return 0
	fi

	set_pub_topic "$pub_topic"
	set_previous_pub_topic "$pub_topic"

	restart_gateway_if_running
}
handle_pub_topic_config

handle_sub_topic_config() {
	sub_topic="$(sub_topic)"
	previous_sub_topic="$(previous_sub_topic)"

	if [ "$sub_topic" = "$previous_sub_topic" ]; then
		return 0
	fi

	set_sub_topic "$sub_topic"
	set_previous_sub_topic "$sub_topic"

	restart_gateway_if_running
}
handle_sub_topic_config

handle_user_config() {
	user="$(user)"
	previous_user="$(previous_user)"

	if [ "$user" = "$previous_user" ]; then
		return 0
	fi

	set_user "$user"
	set_previous_user "$user"

	restart_gateway_if_running
}
handle_user_config

handle_time_sync_config() {
	time_sync="$(time_sync)"
	previous_time_sync="$(previous_time_sync)"

	if [ "$time_sync" = "$previous_time_sync" ]; then
		return 0
	fi

	set_time_sync "$time_sync"
	set_previous_time_sync "$time_sync"

	restart_gateway_if_running
}
handle_time_sync_config

handle_time_format_config() {
	time_format="$(time_format)"
	previous_time_format="$(previous_time_format)"

	if [ "$time_format" = "$previous_time_format" ]; then
		return 0
	fi

	set_time_format "$time_format"
	set_previous_time_format "$time_format"

	restart_gateway_if_running
}
handle_time_format_config

handle_presence_topic_config() {
	presence_topic="$(presence_topic)"
	previous_presence_topic="$(previous_presence_topic)"

	if [ "$presence_topic" = "$previous_presence_topic" ]; then
		return 0
	fi

	set_presence_topic "$presence_topic"
	set_previous_presence_topic "$presence_topic"

	restart_gateway_if_running
}
handle_presence_topic_config

handle_presence_config() {
	presence="$(presence)"
	previous_presence="$(previous_presence)"

	if [ "$presence" = "$previous_presence" ]; then
		return 0
	fi

	set_presence "$presence"
	set_previous_presence "$presence"

	restart_gateway_if_running
}
handle_presence_topic_config

handle_lwt_topic_config() {
	lwt_topic="$(lwt_topic)"
	previous_lwt_topic="$(previous_lwt_topic)"

	if [ "$lwt_topic" = "$previous_lwt_topic" ]; then
		return 0
	fi

	set_lwt_topic "$lwt_topic"
	set_previous_lwt_topic "$lwt_topic"

	restart_gateway_if_running
}
handle_lwt_topic_config
